<style lang="less">
.container {
  background-image: linear-gradient( 45deg, #5A4B43 , #2A2A2A 50% , #474139);
  height:100vh;
  overflow: hidden;
  background-repeat:no-repeat;
  background-size:cover;
  background-position:center;
  // padding: 0 30rpx;

  font-family: -apple-system-font,Helvetica Neue,Helvetica,sans-serif;
  /*height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;*/
  .page-bd{
    // height: 100%;
  }
  .page-ft{
    // background-image: linear-gradient( 45deg, #5A4B43 , #474139);
    overflow: hidden;
    position: fixed;
    bottom: 0;
    width: 100%;
    // height: 200rpx;
  }
}
</style>

<script>
import wepy from 'wepy'
// import baseMixin from '@/mixins/base'
import 'wepy-async-function'

export default class extends wepy.app {
  config = {
    pages: [
      // 'pages/mall/mall',
      'pages/index/index',
      'pages/background/background',
      'pages/mall/mall'
    ],
    window: {
      backgroundTextStyle: 'dark',
      navigationBarBackgroundColor: '#2A2A2A',
      navigationBarTitleText: '智能助理',
      navigationBarTextStyle: 'white',
      backgroundColor: '#2A2A2A'
    }
  }

  globalData = {
    host: 'https://jdzs.wezhuiyi.com/node/',
    systemInfo: {},
    userInfo: null,
    footHeight: 260,
    clientHeight: '',
    cursorSpace: ''
  }

  constructor () {
    super()
    const self = this
    this.intercept('request', {
      config (p) {
        // p.timestamp = +new Date()
        p.header || (p.header = {})
        let sessionID = wx.getStorageSync('sessionID')
        p.header['cookie'] = 'restifySessionid=' + sessionID
        return p
      },
      success (obj) {
        // console.log('request success')
        let sessionID = self.getCookie(obj.header['Set-Cookie'], 'restifySessionid')
        if (sessionID) {
          wx.setStorage({
            key: 'sessionID',
            data: sessionID
          })
        }
        return obj
      }
    })
    this.use('requestfix')
    this.use('promisify')
  }

  onLaunch() {
    // console.log('onlaunch')
    this.auth()
    let self = this
    wx.getSystemInfo({
      success: function (res) {
        console.log(res)
        self.systemInfo = res
        // console.log('height calculate end')
        // self.$broadcast('reset-client-height')
        const resFootHeight = self.globalData.footHeight * res.windowWidth / 750
        // console.log('calcute footheight: ' + resFootHeight)
        self.globalData.clientHeight = res.windowHeight - resFootHeight
      },
      fail: function () {
        const resFootHeight = self.globalData.footHeight * 2
        self.globalData.clientHeight = res.windowHeight - resFootHeight
      }
    })
  }

  onShow () {
    let self = this
    // 检测当前用户登录态是否有效
    wx.checkSession({
      success: function () {
        // session 未过期，并且在本生命周期一直有效
        // console.log('session 未过期')
      },
      fail: function () {
        // 登录态过期
        self.login() // 重新登录
      }
    })
  }

  login () {
    let self = this
    // 调用接口获取登录凭证（code）进而换取用户登录态信息
    wx.login({
      success: function(res) {
        console.log('wx login: ' + res.code)
        if (res.code) {
          // 发起网络请求 后台code 换取 session_key
          wepy.request({
            url: self.globalData.host + 'secure/login',
            data: {
              code: res.code
            }
          }).then(res => {
            // console.log(res)
          })
        } else {
          console.log('获取用户登录态失败！' + res.errMsg)
        }
      }
    })
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async auth () {
    // const data = await this.sleep(3)
    // console.log(data)
    wx.getSetting({
      success(res) {
        if (!res.authSetting['scope.record']) {
          wx.authorize({
            scope: 'scope.record',
            success() {
              // 用户已经同意小程序使用录音功能，后续调用 wx.startRecord 接口不会弹窗询问
              // wx.startRecord()
              console.log('用户已经同意小程序使用录音功能')
            }
          })
        }
      }
    })
  }

  async getUserInfo(cb) {
    if (this.globalData.userInfo) {
      cb && cb(this.globalData.userInfo)
      return this.globalData.userInfo
    }
    let data = await wepy.getUserInfo()
    // console.log(userInfo)
    this.globalData.userInfo = data.userInfo
    return this.globalData.userInfo
   /* wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    }) */
  }

  getCookie(str, name) {
    const reg = new RegExp('(^| )' + name + '(?:=([^;]*))?(;|$)')
    const val = str.match(reg)
    return val ? (val[2] ? unescape(val[2]) : '') : null
  }
}
</script>
