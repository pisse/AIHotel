<style lang="less">
  .shadow-box{
    height:10rpx;
    width:100%;
    position:fixed;
    box-shadow:0 6px 10px 0 rgba(0,0,0,0.1);
    top:-12rpx;
  }
  .nav-wrap {
    position: fixed;
    z-index: 1;
    top: 0;
    // height: 128rpx;
    height: 55rpx;
    padding-top: 0;
    width: 100%;
    // display: flex;
    // flex-direction: column;
    // align-items: flex-start;
    background-color: #2A2A2A;
    .nav-bar {
      width: 100%;
      font-size: 36rpx;
      text-align: center;
      color: #fff;
      // height:110rpx;
      height:55rpx;
      line-height:110rpx;
      // margin-top:30rpx;
    }
  }
  .language-setting{
    //position: absolute;
    //top: 30rpx;
    //right: 30rpx;
    // z-index: 99;
    text-align: right;
    padding-right: 30rpx;
    padding-top: 30rpx;
    .lang{
      font-family: PingFang-SC-Bold;
      border: 1rpx solid #DEDEDE;
      width: 86rpx;
      height: 64rpx;
      line-height: 64rpx;
      font-size: 32rpx;
      display: inline-block;
      text-align: center;
      color: #999999;
      &.cur{
        background-color: #E0E3E7;
        color: #292E42;
      }
      &.left{
        border-right: 0;
        border-radius: 40px 0 0 40px;
      }
      &.right{
        border-left: 0;
        border-radius: 0 40px 40px 0;
      }
    }
  }
  .avatar-bg{
    position: absolute;
    // top: 73rpx;
    top: 0rpx;
    padding: 2rpx;
    // background-image: linear-gradient( 135deg, #B98334, #ffffff);
    background-image: linear-gradient(54deg, #424242 0%, #2A2A2A 100%);
    line-height: 0;
    border-radius: 50%;
    margin-left: 30rpx;
    width: 110rpx;
    height: 110rpx;
    border: 2rpx solid #81715D;
    // opacity: 0.8;
  }

  .userinfo-avatar {
    width: 70rpx;
    height: 54rpx;
    margin-left: 20rpx;
    margin-top: 28rpx;
    // border-radius: 50%;
    // border:2rpx solid red;

  }
  .scroll_view {
    // padding-top: 100rpx;
  }
  .main{
    .page-bd{
    }
    .page-ft{
      box-shadow:  0 -6px 12px 0 rgba(0,0,0,0.04);
      .foot-mask{
        position: fixed;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        opacity: 0;
        background-color: #000000;
      }
    }
  }
  .userinfo-nickname {
    color: #aaa;
  }
  #scroll_bottom_pos {
    height: 0;
  }
  .wxc-dialog .input-wrap{
    text-align: center;
    font-size: 26rpx;
    margin-bottom: 10rpx;
    .input{
      height: 80rpx;
      // border-bottom: 1px solid rgb(233,233,233);
    }
  }

  .auth-dialog{
    .auth-mask{
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      opacity: 0.3;
      background-color: #000000;
    }
    .auth-content{
      display: flex;
      flex-direction: column;
      justify-content: space-around;
      align-items: flex-start;
      background-color: #fff;
      position: absolute;
      height: 67%;
      top: 13%;
      padding: 60rpx 60rpx 0;
      box-sizing:border-box;
      width: 100%;
      .auth-header{
        font-size: 54rpx;
        color: #BFA87C;
      }
      .input{
        height:60rpx;
        width: 100%;
        border-bottom: 1rpx solid #999999;
        font-size: 32rpx;
        color: #999999;
      }
      .auth-btn-wrap{
        width: 100%;
        height: 102rpx;
        text-align: right;
        .auth-btn{
          font-family:  PingFang-SC-Bold;
          width: 256rpx;
          text-align: center;
          height: 100%;
          line-height: 102rpx;
          background: #292E42;
          border-radius: 100px;
          font-size: 36rpx;
          color: #ffffff;
          display: inline-block;
          margin-top: -20rpx;
        }
      }
    }
  }

  @font-face {
    font-family: 'iconfont';
    src: url(data:font/truetype;charset=utf-8;base64,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) format('truetype');
    font-weight: normal;
    font-style: normal;
  }

  .iconfont {
    font-family:"iconfont" !important;
    font-size:32rpx;
    font-style:normal;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  .icon-close1:before { content: "\e633"; }

  .icon-add1:before { content: "\e602"; }

  .icon-close:before { content: "\e647"; }

  .icon-add:before { content: "\e65c"; }

  .icon-menu:before { content: "\e6c1"; }
</style>
<template>
  <view class="container"  style="background-image: {{previewBg}}">
   <!-- <view class="nav-wrap">
      <view class="nav-bar"></view>
      <view class="avatar-bg"><image class="userinfo-avatar" src="{{ headImg }}"/></view>
      &lt;!&ndash;<view class="userinfo-nickname">{{ userInfo.nickName }}</view>&ndash;&gt;
    </view>-->
    <view class="shadow-box"></view>
    <view class="main">
      <view class="page-bd">
        <scroll-view  scroll-y="true" style="height: {{clientHeight + 'px'}}"
                      scroll-with-animation="true"
                      enable-back-to-top="true"
                      scroll-top="{{scrollTop}}">
          <view id="scroll_view" class="scroll_view">
            <view class="language-setting">
              <text class="lang left {{lang == 'zh_CN' ? 'cur' : ''}}" bindtap="setLang('zh_CN')">ä¸­</text>
              <text bindtap="setLang('en')" class="lang right {{lang == 'en' ? 'cur' : ''}}">En</text>
            </view>
            <repeat for="{{messages}}" key="index" index="index" item="item">
              <message :item="item"
                       @relate-select.user="newMessage"
                       @refresh-answer.user="refreshAnswer"
                       @add-message.user="messageFeedback"
                       @task-confirm.user="newMessage"
                       @action-message.user="messageAction"
                       @order-confirm.user="orderConfirm"
              ></message>
            </repeat>
            <!-- <view id="scroll_bottom_pos"></view>-->
          </view>
        </scroll-view>

      </view>
      <!--<view class="page-ft" style="height: {{footHeight ? footHeight + 'rpx':'auto'}}">-->
      <view class="page-ft" style="height: {{footHeight ? footHeight + 'rpx':'auto'}}">
        <view class="foot-mask" bindtap="closeEmojiVoice" wx:if="{{isEmojiVoiceOpen}}"></view>
        <recommend @add-message.user="newMessage"></recommend>

        <keyboard @add-message.user="newMessage"  :iptVal.sync="emojiStr"  @open.user="openEmojiVoice"></keyboard>

        <emojivoice @add-message.user="newMessage"  class="" :type.sync="keyboardType" @add-emoji.user="newEmoji"></emojivoice>

        <!--<navigator url="/test/test-bg" hover-class="navigator-hover">è·³è½¬å°æµè¯</navigator>-->
      </view>
    </view>

    <speach id="toast"></speach>

    <!--<bgsetting></bgsetting>-->

    <!--<wxc-dialog class="wxc-dialog" title="ä¿¡æ¯è®¤è¯" content="" confirm-text="ç¡®è®¤"
                bindtap="masktap" confirmColor="#3B53F4" bindconfirm="onConfirm" bindcancel="onCancel">
      <view class="input-wrap">
        <input class="input"  cursor-spacing="120" type="number" focus="{{autoFocus}}" bindinput="roomIpt" placeholder="æ¿é´å·" />
        <input class="input"  cursor-spacing="80" type="password" value="{{cardNum}}" bindinput="cardIpt" placeholder="èº«ä»½è¯ååä½" />
      </view>
    </wxc-dialog>-->
    <view class="auth-dialog" wx:if="{{authShow}}">
      <view class="auth-mask" bindtap="masktap"></view>
      <view class="auth-content">
        <text class="auth-header">ä¿¡æ¯è®¤è¯</text>
        <input class="input"  cursor-spacing="" type="number" bindinput="roomIpt" placeholder="æ¿é´å·" />
        <input class="input"  cursor-spacing="" type="password" value="{{cardNum}}" bindinput="cardIpt" placeholder="èº«ä»½è¯ååä½" />
        <view class="auth-btn-wrap">
          <text class="auth-btn" bindtap="onConfirm">ç¡®å®</text>
        </view>
      </view>
    </view>

    <!--<import src="../../packages/wxParse/wxParse.wxml"/>
    <template is="wxParse" data="{{wxParseData:article.nodes}}"/>-->

  </view>
</template>

<script>
  import wepy from 'wepy'
  // import List from '../components/list'
  // import Panel from '@/components/panel' // alias example
  import Message from '@/components/message' // alias example
  import Speach from '@/components/speachtoast' // alias example
  import Recommend from '@/components/recommend' // alias example
  import Keyboard from '@/components/keyboard-add' // alias example
  import Bgsetting from '@/components/bgsetting' // alias example
  // import Group from '@/components/group'
  // import Toast from 'wepy-com-toast'
  import EmojiVoice from '@/components/emoji-voice' // alias example
  import baseMixin from '@/mixins/base'
  import util from '@/utils/util.js'

  // import languages from '@/international/globalization.js'
  // const globalization = require('@/international/globalization.js')

  // import wxParse from '@/packages/wxParse/wxParse.js'

  const MessageBackgroundImg = 'message-background-image'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: 'YiButler',
      usingComponents: {
        // 'wxc-dialog': '../../packages/@minui/wxc-dialog/dist/index'
      }
    }
    components = {
      // panel: Panel,
      // list: List,
      // group: Group,
      // toast: Toast,
      message: Message,
      recommend: Recommend,
      keyboard: Keyboard,
      speach: Speach,
      bgsetting: Bgsetting,
      emojivoice: EmojiVoice
    }

    mixins = [baseMixin]

    data = {
      // toView: '',
      page: 0,
      headImg: '',
      article: {
        nodes: [1, 2]
      },
      autoFocus: false,
      authShow: false,
      roomNum: '',
      cardNum: '',
      previewBg: '#EFF1F5', // 'linear-gradient( 45deg, #5A4B43 , #2A2A2A 50% , #474139)',
      scrollTop: 100,
      originHeight: '',
      clientHeight: '',
      smallClientHeight: 200,
      isEmojiVoiceOpen: false,
      messages: [
        {type: 'tip', title: util.formatTime(new Date())}
        // {type: 'me', content: 'æ¨å¥½ï¼å°é¦å¨~æå¯ä»¥å¸®æ¨é¢å®æ¿é´ãè§£ç­é®é¢ãééç©åãå¦æ¨éè¦æ´å¤çå®¢æ¿æå¡ï¼ç¹å»ä¸æ¹æé®ç«å³éªè¯ï¼'}
        // {type: 'me', content: 'ä¸ºäºæ´å¥½çæå¡å°æ¨ï¼è¯·æ¨è®¤è¯å¥ä½ä¿¡æ¯ï¼', action: 'ç«å³éªè¯'}
        /* {type: 'time', title: '10:00am', content: ''},
        {type: 'me', content: 'ææ¼äº®å', 'img': '../common/img/head.png'},
        {type: 'customer', content: 'ææ³äºè§£ä¸æ©é¤æ¶é´'},
        {
          type: 'recommend',
          list: [{
            title: 'å®¢æ¿æå¡',
            items: ['å®¢æ¿æ°´æ²¡äº', 'éä¸ªåé¡»åä¸æ¥', 'é©¬ä¸ææ«']
          }, {
            title: 'ææ°æ´»å¨',
            items: ['æ´»å¨1', 'æ´»å¨2', 'æ´»å¨3']
          }, {
            title: 'é¢å®é¤å',
            items: ['è¥¿é¤', 'ä¸­é¤', 'ç¹å¿']
          }]
        },
        {type: 'tip', title: 'æ­£å¨ä¸ºæ¨è½¬æ¥äººå·¥...', content: 'ãå·¥ç¨é¨ãå®¢æ·ç»çé©¬ä¸ä¸ºæ¨æå¡'},
        {type: 'me', content: 'ä½ å¯è½æå´è¶£ä»¥ä¸é®é¢', list: ['èªç¶é£æ¯', 'äººææ¯è§', 'ç¾é£è¡åº']},
        {type: 'me', content: 'æ¨å¥½å¼ åçï¼å°æå¨~æå¯ä»¥å¸®ä½ é¢å®æ¿é´ãè§£ç­é®é¢ãééç©è´¨...æ¬¢è¿éæ¶æ¾æ'},
        {type: 'me', content: '', 'img': '../common/img/head.png'},
        {type: 'customer', content: 'ææ³äºè§£ä¸æ©é¤æ¶é´'}, {type: 'me', content: 'æ¨å¥½å¼ åçï¼å°æå¨~æå¯ä»¥å¸®ä½ é¢å®æ¿é´ãè§£ç­é®é¢ãééç©è´¨...æ¬¢è¿éæ¶æ¾æ'},
        {type: 'me', content: 'æ¨å¥½å¼ åçï¼å°æå¨~æå¯ä»¥å¸®ä½ é¢å®æ¿é´ãè§£ç­é®é¢ãééç©è´¨...æ¬¢è¿éæ¶æ¾æ'},
        {type: 'customer', content: 'ææ³äºè§£ä¸æ©é¤æ¶é´'}, {type: 'me', content: 'æ¨å¥½å¼ åçï¼å°æå¨~æå¯ä»¥å¸®ä½ é¢å®æ¿é´ãè§£ç­é®é¢ãééç©è´¨...æ¬¢è¿éæ¶æ¾æ'},
        {type: 'customer', content: 'ææ³äºè§£ä¸æ©é¤æ¶é´'}, {type: 'customer', content: 'ææ³äºè§£ä¸æ©é¤æ¶é´'} */
      ],
      emojiStr: '',
      voiceText: '',
      keyboardType: '',
      userInfo: {
        nickName: ''
      },
      customerInfo: null,
      scrollTimer: null,
      globalization: {}
    }

    computed = {
      now () {
        return +new Date()
      }
    }

    methods = {
      setLang (lang) {
        wx.setStorage({
          key: 'LanguageKey',
          data: lang
        })
        wx.showToast({
          title: 'è®¾ç½®æå',
          icon: 'success',
          duration: 1500,
          success: function () {
            wx.reLaunch({
              url: '../index/index'
            })
          }
        })
      },
      tap () {
        // console.log('do noting from ' + this.$name)
      },
      closeEmojiVoice () {
        this.isEmojiVoiceOpen = false
        this.keyboardType = 'text'
        this.$invoke('./emojivoice', 'hide', {}).then(() => {
          this.clientHeight = this.originHeight
          this.$apply()
          setTimeout(() => {
            this.pageScrollToBottom(500)
          }, 10)
        })
        this.$invoke('./keyboard', 'resetType')
      },
      openEmojiVoice (type) {
        this.keyboardType = type
        this.isEmojiVoiceOpen = true
        this.$invoke('./emojivoice', 'show').then(() => {
          this.clientHeight = this.originHeight - this.smallClientHeight
          this.$apply()
          setTimeout(() => {
            this.pageScrollToBottom(500)
          }, 10)
        })
      },
      newEmoji (emoji, $event) {
        this.emojiStr = emoji
        this.$apply()
      },
      async newMessage (message, $event) {
        console.log('get new message')
        let self = this
        // console.log(arguments)
        this.pushMessage(message)
        // this.messages.push(message)
        // æå®¢æ·èµè®¯ï¼è°è¿½ä¸æå¡æ¥åå¤
        if (message.type == 'customer') {
          await this.question(message)
        }
        /*
        this.toView = 'scroll_bottom_pos'
        setTimeout(() => {
          self.toView = ''
        })
        */
      },
      async refreshAnswer (data) {
        await this.question(data, this.page)
      },
      async messageFeedback (info, $event) {
        if (info.link != 'cmd') {
          this.pushMessage({
            type: 'customer',
            content: info['question']
          })
        }
        let message = {
          type: 'me',
          content: ''
        }
        let content = await this.getContent(info)
        if (content) {
          Object.assign(message, content)
          this.pushMessage(message)
        }
      },
      async orderConfirm (data, $event) {
        let openID = wx.getStorageSync('openID')
        let res = await wepy.request({
          url: this.api + 'api/public/task/order',
          method: 'post',
          header: {
            'content-type': 'application/x-www-form-urlencoded'
          },
          data: {
            openid: openID,
            input: data.input
          }
        })
        let message = {
          type: 'me',
          content: res.data.message
        }
        this.pushMessage(message)
      },
      messageAction (message) {
        let info = message.info || {}
        if (info.answerType == 'image-text') {
          let answerJson = info['answerjson'][0]
          this.redirect(answerJson['url'])
        } else {
          this.showDialog()
        }
      },
      roomIpt (e) {
        this.roomNum = e.detail.value
      },
      cardIpt (e) {
        if (e.detail.value.length > 4) {
          wx.showToast({
            title: 'æå¤4ä½',
            icon: 'none',
            duration: 1000
          })
        }
        let val = e.detail.value.slice(0, 4)
        // console.log(val)
        this.cardNum = val
        return val
      },
      onConfirm (e) {
        let self = this
        this.autoFocus = false
        if (this.roomNum && this.cardNum) {
          /* this.customerInfo = {
            room: this.roomNum,
            card: this.cardNum
          } */
          let openID = wx.getStorageSync('openID')
          wepy.request({
            url: self.api + 'api/hotel/user/certifiedRoom',
            method: 'post',
            header: {
              'content-type': 'application/x-www-form-urlencoded'
            },
            data: {
              openid: openID,
              roomNo: self.roomNum,
              idNumber: self.cardNum
            }
          }).then(res => {
            if (res.data.code == 0) {
              wx.showToast({
                title: 'æå',
                icon: 'success',
                duration: 2000
              })
              wx.hideLoading()
              self.hideDialog()
              let authSuccess = {
                type: 'tip',
                title: res.data.message
              }
              self.messages.push(authSuccess)
              self.$apply()
            } else {
              wx.showToast({
                title: res.data.message,
                icon: 'none',
                duration: 2000
              })
              // wx.hideLoading()
              // self.hideDialog()
            }
          })
          wx.showLoading({
            title: 'è®¤è¯ä¸­...'
          })
        } else {
          let msg = !this.roomNum ? 'è¯·è¾å¥å®¢æ¿å·' : 'è¯·è¾å¥èº«ä»½è¯ååä½'
          wx.showToast({
            title: msg,
            icon: 'none',
            duration: 2000
          })
        }
      },
      masktap (e) {
        this.hideDialog()
      }
    }

    showDialog () {
      /* let $dialog = this.$wxpage.selectComponent('.wxc-dialog')
      this.autoFocus = true
      $dialog && $dialog.show() */
      this.autoFocus = true
      this.authShow = true
      this.cardNum = ''
      this.$apply()
    }
    hideDialog () {
      /* let $dialog = this.$wxpage.selectComponent('.wxc-dialog')
      $dialog && $dialog.hide() */
      this.authShow = false
      this.$apply()
    }
    redirect(url) {
      let protocol = url.split(':')[0]
      if (protocol == 'wx') {
        wx.navigateTo({
          url: url.split(':')[1]
        })
      // web-view show
      } else {
      }
    }
    pushMessage (msg) {
      console.log(msg)
      if (Array.isArray(msg)) {
        this.messages = this.messages.concat(msg)
      } else {
        this.messages.push(msg)
      }
      this.$apply()
      setTimeout(() => {
        this.pageScrollToBottom()
      }, 150)
    }
    pageScrollToBottom(h) {
      let self = this
      h = h || 1
      wx.createSelectorQuery().select('#scroll_view').boundingClientRect((rect) => {
        // ä½¿é¡µé¢æ»å¨å°åºé¨
        /* wx.pageScrollTo({
         scrollTop: rect.bottom
         }) */
        // self.scrollTop += 100
        // console.log(rect)
        console.log(`scrolling height: ${rect.height}, top: ${rect.top}, bottom: ${rect.bottom}`)
        self.scrollTop = rect.height + h // - self.clientHeight
        self.$apply()
      }).exec()
    }
    async question (message, page) {
      if (page === undefined) {
        this.page = 0
      } else {
        this.page += 1
      }
      let self = this
      let res = await wepy.request({
        url: self.host + 'zy_service/query?question=' + message['content'] + '&page=' + this.page
      })

      let result = res.data.data
      if (result.status == 0) {
        let answer = await this.getAnswer(result)
        if (answer) {
          this.pushMessage(answer)
          await this.analysisAnswer(result)
        }
      }
    }
    async analysisAnswer (result) {
      let answerType = result.answer_type
      if (result.clarify) {
        answerType = 'task'
      }
      switch (answerType) {
        case 'reject':
          break
        case 'faq':
          break
        case 'task':
          await this.analysisTask(result)
          break
        default:
      }
    }
    async analysisTask (data) {
      let clarifyInfo = data.clarify
      if (clarifyInfo.DATA && clarifyInfo.DATA.task_id) {
        let openID = wx.getStorageSync('openID')
        let selectedTaskId = wx.getStorageSync('selectedTaskId')
        let res = await wepy.request({
          url: this.api + 'api/public/task/getData',
          data: {
            openid: openID,
            choose_id: selectedTaskId,
            params: JSON.stringify(clarifyInfo.DATA)
          }
        }).catch(e => {
          console.log(e)
        })
        /* selectInfo = [
          {name: 'å«å', price: 100, img: 'https://jdzs.wezhuiyi.com/static/img/head.png'},
          {name: 'å®é©¬', price: 100, img: 'https://jdzs.wezhuiyi.com/static/img/head.png'}
        ] */
        let type = res.data.data.type
        let taskMessage = {}
        if (type == 1) {
          taskMessage = {
            type: 'task_list',
            logo: false,
            task_list: res.data.data.list,
            random: Math.random()
          }
        } else if (type == 2) {
          taskMessage = {
            type: 'task_order',
            logo: false,
            title: res.data.data.list.title,
            list: res.data.data.list.list
          }
          if (taskMessage.list && taskMessage.list.length % 2 != 0) {
            taskMessage.list.push({})
          }
          console.log(taskMessage)
        }
        this.pushMessage(taskMessage)
      }
    }
    async getAnswer (result) {
      let answers = []
      let answerType = result.answer_type
      if (result.clarify) {
        answerType = 'task'
      }
      // reject_focog
      if (result.reject_recog) {
        answerType = 'reject'
      }
      switch (answerType) {
        case 'reject':
          let rejectAnswer = this.getRejectAnswer(result)
          answers.push(rejectAnswer)
          break
        case 'faq':
          let faqAnswer = await this.getFaqAnswer(result)
          answers.push(faqAnswer)
          break
        case 'task':
          if (!result.clarify.answer && result.info && result.info.length > 0) {
            let faqAnswer = await this.getFaqAnswer(result)
            answers.push(faqAnswer)
          }
          if (result.clarify.answer) {
            let taskAnswer = await this.getTaskAnswer(result)
            answers.push(taskAnswer)
          }
          break
        default:
          let answer = await this.getFaqAnswer(result)
          answers.push(answer)
      }
      return answers
    }
    getRejectAnswer (data) {
      let message = {
        type: 'me',
        content: data.reject_info
      }
      return message
    }
    async getTaskAnswer (data) {
      let self = this
      let message = {
        type: 'me',
        content: '',
        task_question: ''
      }
      let clarifyInfo = data.clarify
      message['content'] = clarifyInfo['answer'].replace(/'/g, '')
        .replace(/&nbsp;/g, ' ').replace(/&amp;/g, '&')
        .replace(/<\/?[^>]*>/g, '') // è¿æ»¤htmlçæ ç­¾
        .replace(/&lt;/g, '<').replace(/&gt;/g, '>')
      // message['list'] = clarifyInfo['relate']
      // message['list_type'] = 'task'
      if (clarifyInfo && clarifyInfo.DATA && clarifyInfo.DATA.no_show) {
        message['no_show'] = true
        message['logo'] = false
      }
      message['task_question'] = clarifyInfo['question']
      return message
    }
    async getFaqAnswer (data) {
      let infos = data.info
      let message = {
        type: 'me',
        content: ''
      }
      // recommend answer
      if (data.type == 300) {
        message['content'] = data.question // 'æ¨å¯è½æå´è¶£ä»¥ä¸é®é¢'
        message['list'] = infos && infos.slice()
         /*  .map(item => {
          return self.getContent(item, true)['content']
        }) */
      } else if (data.type == 200) { // direct answer
        let content = await this.getContent(infos[0])
        if (content) {
          Object.assign(message, content)
        } else {
          return false
        }
      }

      return message
    }
    async getContent (info) {
      let self = this
      let message = {
        // answerType: info.answerType,
        info: info
      }
      switch (info.answerType) {
        case 'image-text':
          let answerJson = info['answerjson'][0]
          message['content'] = answerJson['title']
          message['img'] = answerJson['pic_url']
          break
        case 'text':
          message['content'] = info['answer']
          message['relate'] = info['relate']
          break
        case 'rich-text':
          message['content'] = info['answer']
          break
        default:
          message['content'] = info['answer'] || 'å¯¹ä¸èµ·ï¼è¿ä¸ªæä¸è½è¯å«'
      }
      if (info.link) {
        // message['type'] = 'tip'
        let openID = wx.getStorageSync('openID')
        let certifidInfo = await wepy.request({
          url: self.api + 'api/hotel/user/isCertifiedRoom',
          data: {
            openid: openID
          }
        })
        if (certifidInfo.data.data.status != 1) {
          this.showDialog()
          return false
        } else {
          let hotelUserId = certifidInfo.data.data.hotel_id
          wx.setStorage({
            key: 'hotelRoomId',
            data: hotelUserId
          })
          let link = {}
          try {
            link = JSON.parse(info.link)
          } catch (e) {
            console.log(e)
            link = {}
          }
          return await wepy.request({
            url: self.api + 'api/hotel/room/order',
            method: 'post',
            header: {
              'content-type': 'application/x-www-form-urlencoded'
            },
            data: {
              openid: openID,
              hotel_user_id: hotelUserId,
              roomNo: '',
              type: link['type'],
              cmd: link['cmd'],
              remark: ''
            }
          }).then(res => {
            if (res.data.code == 0) {
              // message['content'] = 'æ¨çè¦æ±å·²æ¶å°ï¼è¯·ç¨ç­~'
              return message
            } else {
              message['content'] = res['message']
              return false
            }
          })
        }
      }
      return message
    }
    events = {
      'index-emit': (...args) => {
        let $event = args[args.length - 1]
        console.log(`${this.$name} receive ${$event.name} from ${$event.source.$name}`)
      }
      /* 'reset-client-height': (message, $event) => {
        console.log('reset client height')
        this.clientHeight = this.$parent.globalData.clientHeight
      } */
    }
    onReady () {
      console.log('index ready')
      this.pageScrollToBottom()
    }
    async onShow () {
      /* let date = new Date()
      this.pushMessage({
        type: 'tip',
        title: util.formatTime(date)
      }) */
      // console.log(util.formatTime(date))
      // è·åæ¬å°å­å¨çèæ¯å¾ç
      try {
        this.pageScrollToBottom()
        /* var bgImage = wx.getStorageSync(MessageBackgroundImg)
        if (bgImage) {
          this.previewBg = bgImage
        } */
      } catch (e) {
      }

      this.lang = wx.getStorageSync('LanguageKey')
      this.globalization = this.getLanguage()
      wx.setNavigationBarTitle({
        title: this.globalization['assistant']
      })
    }
    async onLoad() {
      let self = this
      // console.log(this.$wxapp.globalData)
      // this.rpx2px()

      if (!this.$parent.globalData.clientHeight) {
        // console.log('index page1, clientHeight' + this.$parent.globalData.clientHeight)
        wx.getSystemInfo({
          success: function (res) {
            const resFootHeight = self.globalData.footHeight * res.windowWidth / 750
            self.globalData.clientHeight = res.windowHeight - resFootHeight
            self.clientHeight = self.globalData.clientHeight
            self.originHeight = self.clientHeight
            console.log(`height setting, clientHeight: ${self.clientHeight}, footHeight: ${resFootHeight}`)
            self.$apply()
          }
        })
      } else {
        this.clientHeight = this.$parent.globalData.clientHeight
        this.originHeight = self.clientHeight
        // console.log('index page2, clientHeight' + this.clientHeight)
        // self.$apply()
      }
      /* let article = '<div>ææ¯HTMLä»£ç </div>'
      let htmlContent = wxParse.wxParse('article', 'html', article, this, 5)
      this.article = htmlContent['article'] */

      this.userInfo = await this.$parent.getUserInfo().catch(e => {
        console.log(e)
      })
      this.headImg = this.getImg('/common/img/head', 'png')
      let welcomeInfo = await wepy.request({
        url: self.api + 'api/public/config/getWelcome'
      }).then(res => {
        let welcome = {
          type: 'me',
          content: res.data.data
        }
        this.messages.push(welcome)
        let authMsg = {type: 'me', logo: false, icon: this.getImg('/common/img/right', 'png'), content: '', action: 'ç«å³éªè¯'}
        this.messages.push(authMsg)
        this.$apply()
      })
      self.$apply()
      /* this.$parent.getUserInfo(function (userInfo) {
        console.log(userInfo)
        if (userInfo) {
          self.userInfo = userInfo
        }
        self.$apply()
      }) */
    }
  }
</script>
