<style lang="less">
  .mall{
    background-color: #f5f5f5;
    height: 100vh;
    .categories {
      position: fixed;
      top: 0;
      width: 100%;
      height: 72rpx;
      background-color: #fff;
      margin-bottom: 30rpx;
      font-size: 30rpx;

      .category-item{
        height: 72rpx;
        display: inline-block;
        margin-right: 30rpx;
        text-align:center;
        line-height:72rpx;
        &:first-child{
          margin-left: 30rpx;
        }
        &.current {
          border-bottom: 2px solid #ff1317;
        }
      }
    }
    .list{
      box-sizing: border-box;
      padding-top: 80rpx;
      padding-bottom: 100rpx;
      font-size: 28rpx;
      .list-item{
        text-align: center;
        display: inline-block;
        width: 50%;
        // height: 50vw;
        overflow: hidden;
        background-color: #fff;
        padding: 10rpx;
        // padding:10rpx;
        box-sizing:border-box;
        .detail{
          height: 32rpx;
          line-height: 32rpx;
        }
        .food-img{
          box-sizing: border-box;
          width: 100%;
          height: 50vw;
          background-color: #f5f5f5;
        }
      }
    }
    .foot-btns{
      position: absolute;
      bottom: 0;
      width: 100%;
      height: 100rpx;
      .cart, .pay{
        width: 50%;
        display: inline-block;
        text-align: center;
        line-height: 100rpx;
        color: #fff;
        font-size: 28rpx;
      }
      .cart{
        background-color: #2A2A2A;
      }
      .pay{
        background-color: #ff1317;
      }
    }
  }
</style>
<template>
  <view class="mall">
    <scroll-view  scroll-y="true" style="height:100vh">
      <view class="categories">
        <scroll-view scroll-x="true" style="white-space: nowrap; display: flex;">
          <repeat for="{{categories}}" key="index" index="index" item="item">
            <text class="category-item {{item.isSelected ? 'current': ''}}"  bindtap="select({{item}})">{{item.name}}</text>
          </repeat>
        </scroll-view>
      </view>

    <view class="list">
      <repeat for="{{items}}" key="index" index="index" item="item">
        <view class="list-item"  bindtap="selectItem({{item}})">
          <image class="food-img" mode="scaleToFill" src="{{item.img}}"/>
          <view class="detail">{{item.name}}</view>
        </view>
      </repeat>
    </view>
    </scroll-view>
    <view class="foot-btns">
      <view class="cart" bindtap="cancel">购物车</view>
      <view class="pay" bindtap="confirm">下单</view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'

  import baseMixin from '@/mixins/base'

  const MessageBackgroundImg = 'message-background-image'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '美食',
      usingComponents: {
        'wxc-dialog': '../../packages/@minui/wxc-dialog/dist/index'
      },
      backgroundColor: '#f5f5f5'
    }
    components = {
    }

    mixins = [baseMixin]

    data = {
      categories: [
        { name: '早餐',
          val: 'zaocan',
          isSelected: true,
          items: [
            {name: '豆浆', img: '../../common/img/doujiang.jpg'},
            {name: '油条', img: '../../common/img/youtiao.jpg'},
            {name: '茶叶蛋', img: '../../common/img/dan.jpg'},
            {name: '煎饼', img: '../../common/img/jianbing.jpg'},
            {name: '包子', img: '../../common/img/baozi.jpg'},
            {name: '牛奶', img: '../../common/img/niunai.jpg'}
          ]
        },
        { name: '夜宵', val: 'yexiao', items: [] },
        { name: '晚餐', val: 'wancan', items: [] },
        { name: '酒水', val: 'jiushui', items: [] }
      ]
    }

    computed = {
      items () {
        let cate = this.categories.find((item) => {
          return item.isSelected
        })
        return cate['items']
      }
    }

    methods = {
      select (item) {
        this.categories.forEach((v) => {
          if (item.val != v.val) {
            v.isSelected = false
          } else {
            v.isSelected = true
          }
        })
      },
      selectItem (item) {}
    }

    onReady () {}

    onShow () {}

    async onLoad() {}
  }
</script>
