<style lang="less">
  .wepytoast {
    display: none;
  }
  .wepytoast_show {
    display: block;
  }
  .wepytoast__mask {
    position: fixed;
    z-index: 1000;
    top: 0;
    right: 0;
    left: 0;
    bottom: 0;
  }
  .wepytoast__bd {
    opacity: 1;
    display: flex;
    flex-direction: column;
    position: fixed;
    z-index: 5000;
    // min-width: 7.4em;
    // min-height: 7.4em;
    // max-width: 70%;
    width: 350rpx;
    height: 350rpx;
    top: 50%;
    margin-top: -200rpx;
    left: 50%;
    padding: 15px;
    box-sizing: border-box;
    transform: translateX(-50%);
    background: rgba(40, 40, 40, 0.8);
    border-radius: 5px;
    color: #FFFFFF;
    word-wrap: break-word;
    word-break: break-all;
    align-items: center;
    justify-content: space-around;
  }
  .wepytoast__bd__img {
    margin-top: 3px;
    display: flex;
    justify-content: space-between;
    .spot{
      width: 4rpx;
      height: 8rpx;
      margin: 0 8rpx;
      border-radius: 3px;
      background-color: #fff;
    }
    .centerSpot{
      width: 24rpx;
      border: 6rpx solid #fff;
      height: 24rpx;
      border-radius: 50%;
      margin-top: -12rpx;
      background-color: transparent;
    }
  }
  .wepytoast__bd__img_desc {
    width: 55px;
    height: 55px;
    vertical-align: middle;
  }
  .wepytoast__bd__title {
    margin: 3px 0;
    font-size: 0.8em;
    overflow:hidden;
    text-overflow:ellipsis;
    white-space:nowrap;
    width: 220rpx;
    text-align: center;
  }
  .wepytoast__bd__tip {
    margin: 3px 0;
    font-size: 0.8em;
    color:rgba(255,255,255,0.5);
  }
  .wepytoast__bd__notice {
    margin: 3px 0;
    font-size: 0.75em;
    color:rgba(255,255,255,0.5);
  }
  .wepytoast__bd__notice--red{
    color: red;
  }
</style>
<template>
  <view class="wepytoast {{reveal ? 'wepytoast_show' : ''}}">
    <block wx:if="{{!no_mask}}">
      <view class="wepytoast__mask"></view>
    </block>

    <view class="wepytoast__bd" animation="{{animationData}}">
      <block wx:if="{{tip}}">
        <view class="wepytoast__bd__tip">{{tip}}</view>
      </block>
      <block wx:if="{{title}}">
        <view class="wepytoast__bd__title {{titleClassName || ''}}">{{title}}</view>
      </block>
      <block wx:if="{{img}}">
        <view class="wepytoast__bd__img {{imgClassName || ''}}">
          <!--<image class="wepytoast__bd__img_desc" src="{{img}}" mode="{{imgMode || 'scaleToFill'}}"></image>-->
          <repeat for="{{spotNum}}" key="index" index="index" item="item">
            <view class="spot {{index==(spotNum-1)/2 ? 'centerSpot':''}}" animation="{{anis[index]}}"></view>
          </repeat>
        </view>
      </block>
      <block wx:if="{{notice}}">
        <view class="wepytoast__bd__notice {{showCancel ? 'wepytoast__bd__notice--red' : ''}}">{{notice}}</view>
      </block>
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'

  export default class Toast extends wepy.component {
    data = {
      spotNum: 13,
      anis: {},
      reveal: false,
      img: '',
      animationData: '',
      imgClassName: '',
      imgMode: 'scaleToFill',
      title: '',
      tip: '',
      notice: '',
      titleClassName: '',
      no_mask: false,
      showCancel: false,
      animationTimers: {}
    }

    methods = {}

    onLoad () {
      this.hasPromise = (typeof Promise !== 'undefined')
    }

    show (data = {}) {
      this.reveal = true
      for (let k in data) {
        this[k] = data[k]
      }
      this.img = data.img || false
      this.title = data.title || ''

      this.$apply()

      clearTimeout(this.__timeout)
      setTimeout(() => {
        let animation = wx.createAnimation()
        animation.opacity(1).step()
        this.animationData = animation.export()
        this.reveal = true
        this.$apply()
      }, 30)

      this.clearImgAnimation()
      if (data.img) {
        for (let i = 0; i < this.spotNum; i++) {
          this.createImgAnimation(i)
        }
      }

      if (data.duration === 0) {
        // success callback after toast showed
        if (this.hasPromise) {
          return new Promise((resolve, reject) => {
            setTimeout(() => {
              resolve(data)
            }, 430)
          })
        } else {
          setTimeout(() => {
            return (typeof data.success === 'function') ? data.success(data) : data
          }, 430)
        }
      } else {
        if (this.hasPromise) {
          return new Promise((resolve, reject) => {
            this.__timeout = setTimeout(() => {
              this.toast()
              resolve(data)
            }, (data.duration || 1500) + 400)
          })
        } else {
          this.__timeout = setTimeout(() => {
            this.toast()

            // success callback
            typeof data.success === 'function' && data.success(data)
          }, (data.duration || 1500) + 400)
        }
      }
    }

    createImgAnimation (idx) {
      if (idx == (this.spotNum - 1) / 2) {
        return
      }
      var animation = wx.createAnimation({
        duration: 500,
        timingFunction: "ease",
        delay:(idx % 6) * 100
      })
      var i = 0
      this.animationTimers[idx] = setInterval(() => {
        i++
        let height = i % 2 ? 2 : 0
        let opacity = i % 2
        animation.scaleY(height).opacity(opacity).step()
        //this.animationData = animation.export()
        this.anis[idx] = animation.export()
        this.$apply()
      }, 500)
    }
    clearImgAnimation () {
      for (let i = 0; i < this.spotNum; i++) {
        this.anis[i] = null
        clearInterval(this.animationTimers[i])
        this.animationTimers[i] = null
      }
    }

    cancel (data) {
      console.log('cancel')
      this.showCancel = true
      this.$apply()
    }
    hideCancel () {
      this.showCancel = false
      this.$apply()
    }

    toast (data) {
      let err = false
      try {
        if (!data) {
          this.hide()
        } else {
          this.show(data)
        }
      } catch (e) {
        err = e
      }

      if (this.hasPromise) {
        return new Promise((resolve, reject) => {
          if (!err) {
            resolve(data)
          } else {
            reject(data)
          }
        })
      } else {
        if (err) {
          typeof data.fail === 'function' && data.fail(data)
        } else {
          typeof data.success === 'function' && data.success(data)
        }
      }
    }

    hide () {
      console.log('hide')
      clearTimeout(this.__timeout)
      this.reveal = false
      this.showCancel = false

      let animation = wx.createAnimation()
      animation.opacity(0).step()
      this.animationData = animation.export()

      this.clearImgAnimation()

      this.$apply()

      if (this.hasPromise) {
        return new Promise((resolve, reject) => {
          resolve()
        })
      } else {
        if (typeof data.success === 'function') {
          return data.success(data)
        }
      }
    }
  }
</script>
