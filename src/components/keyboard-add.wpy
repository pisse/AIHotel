<style lang="less">
  @import "../common/less/mixin.less";

  .keyboard-wrap{
    position: relative;
    display: flex;
    align-items: stretch;
    //padding: 30rpx;
    font-size:28rpx;
    height: 120rpx;
    background-color: #ffffff;
  //  box-shadow: 0 -6px 12px 0 rgba(0,0,0,1);

    &.voice-wrap{
      background-color: #292E42 ;
      .input-wrap, .voice-icon-wrap{
        display: none;
      }
    }
    .voice-tip {
      line-height: 120rpx;
      font-size: 26rpx;
      text-align: right;
      opacity: 0.4;
      color: #ffffff;
      padding-right: 30rpx;
      flex: 1;
      font-family: PingFang-SC-Medium;
    }


    .input-wrap{
      flex: 1;
      height: 120rpx;
      box-sizing: border-box;
      // padding: 0 30rpx;
      // border-bottom-left-radius: 50rpx;
      // border-top-left-radius: 50rpx;
      //background-color: rgba(255,255,255, 1);
      color: #000;
      overflow:hidden;
      .input{
        //padding: 0 30rpx;
        padding-right: 180rpx;
        height: 100%;
        line-height: 100%;
        display: none;
        font-size: 32rpx;
        &.text-show{
          display: inherit;
        }
      }

    }
    .icon-wrap{
      // padding: 30rpx 35rpx;
      box-sizing: border-box;
      flex: 0 0 116rpx;
      width: 116rpx;
      // background-color: #B98334;
      // border-bottom-right-radius: 50rpx;
      // border-top-right-radius: 50rpx;
      vertical-align: middle;
      text-align: center;
      padding: 32rpx;
      line-height: 56rpx;
      .icon-add1, .icon-close1{
        box-sizing: border-box;
        height: 56rpx;
        font-size: 56rpx;
        color: rgba(245,245,245, 0.6);
        display: inline-block;
      }
      .keyboard-icon{
        display: inline-block;
        // width: 100px;
        // height: 100px;
        // padding: 30rpx 35rpx;
        width: 56rpx;
        height: 56rpx;
        box-sizing: border-box;
        &.voice{
          width: 31rpx;
          height: 19rpx;
        }
        // background-size: contain;
        // background-repeat: no-repeat;
        // .bg-image("http://localhost:40000/coupon/icon_keyboard@_ratio_x.png");
        // background-image: url(http://localhost:40000/coupon/icon_keyboard@2x.png);
      }
    }
    .voice-icon-wrap{
      z-index: 2;
      position: absolute;
      top: -25rpx;
      right: 30rpx;
      padding: 32rpx;
      border-radius: 100rpx;
      background-color: #BFA87C;
      .voice-icon{
        width: 62rpx;
        height: 62rpx;
        background-position: center;
        background-size: contain;
        background-repeat: no-repeat;
        display: block;
      }
    }
  }

</style>
<template>
  <view>
    <view class="keyboard-wrap {{type=='voice' ? 'voice-wrap' : ''}}">
      <view class="icon-wrap" bindtap="openEmojiVoice">
        <!--<view class="keyboard-icon"></view>-->
        <image class="keyboard-icon {{type}}" mode="aspectFit" src="{{keyboard_icon}}"></image>
       <!-- <span class="iconfont {{open? 'icon-close1':'icon-add1'}}"></span>-->
      </view>
      <view class="input-wrap">
        <input class="input text-show"
               value="{{sendValue}}"
               focus="{{autoFocus}}"
               confirm-type="send"
               confirm-hold="true"
               cursor-spacing="1"
               bindconfirm="confirm"
               bindfocus="focus"
               bindblur="blur"
               bindinput = "input"
               placeholder="{{ type == 'text' ? '请输入文字...' :  '请输入文字...' }}"/>
      </view>
      <view class="voice-icon-wrap" bindtap="showVoice">
        <!--<view class="keyboard-icon"></view>-->
        <image class="voice-icon" mode="aspectFit" src="{{voice_icon}}"></image>
        <!-- <span class="iconfont {{open? 'icon-close1':'icon-add1'}}"></span>-->
      </view>
      <view wx:if="{{type=='voice'}}" class="voice-tip">{{recordTip}}</view>
      <!--<speach id="toast"></speach>-->
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import baseMixin from '../mixins/base'
  // import Speach from './speachtoast'
  // import Counter from './counter' // alias example
  // import Toast from 'wepy-com-toast'

  export default class Panel extends wepy.component {
    data = {
      systemInfo: null,
      vibrateTimer: '',
      recordCancel: false,
      recorderManager: null,
      touchDot: 0,
      touchMoveDot: 0,
      sendValue: '',
      isOpen: false, // true: text, false: voice
      type: 'text', // text voice emoji
      preType: '',
      recs: [],
      emoji_icon: '/common/img/emoji@2x.png',
      voice_icon: '/common/img/voice@2x.png',
      keyboard_icon: '/common/img/keyboard@2x.png',
      recordTip: '按住话筒讲话',
      count: 1,
      autoFocus: false
    }

    props = {
      iptVal: String
    }

    watch = {
      iptVal (newVal, oldVal) {
        this.sendValue += newVal.split('|')[0]
        this.$apply()
      },
      type (newType) {
        this.keyboard_icon = newType == 'voice' ? this.getImg('/common/img/down', 'png') : (
          newType == 'text' ? this.getImg('/common/img/emoji', 'png') : this.getImg('/common/img/keyboard', 'png'))
      }
    }

    components = {}

    mixins = [baseMixin]

    methods = {
      openEmojiVoice (e) {
        if (this.type == 'voice') {
          this.type = this.preType
          this.preType = 'voice'
        } else {
          this.preType = this.type
          this.type = this.type == 'emoji' ? 'text' : 'emoji'
        }
        this.$emit('open', this.type)
        this.autoFocus = this.type == 'text'
      },
      showVoice (e) {
        this.preType = this.type
        this.type = 'voice'
        this.$emit('open', this.type)
      },
      blur () {
        // this.type = 'text'
        // this.$emit('toggle', this.type)
      },
      focus () {
        this.preType = this.type
        this.type = 'text'
      },
      input (e) {
        this.sendValue = e.detail.value
      },
      confirm (e) {
        let value = this.trim(e.detail.value)
        if (!value) {
          return
        }
        this.sendValue = null // Math.random()
        this.setData({
          sendValue: ''
        })
        this.$apply()
        this.$emit('add-message', {
          type: 'customer',
          content: value
        })
      }
    }

    resetType () {
      console.log('reset')
      this.type = 'text'
      this.preType = ''
      this.$apply()
    }

    modifyTip (txt) {
      this.recordTip = txt
      this.$apply()
    }

    onLoad () {
      let self = this
      // this.root = this.getRoot()
      this.keyboard_icon = this.getImg('/common/img/emoji', 'png')
      this.emoji_icon = this.getImg('/common/img/emoji', 'png')
      this.voice_icon = this.getImg('/common/img/voice', 'png')
      /* this.recs = [
        {key: 'roomService', text: '客房服务'},
        {key: 'texiService', text: '出行租车'},
        {key: 'foodService', text: '美食推荐'},
        {key: 'accidentService', text: '故障服务'}
      ] */
      this.$apply()
      /*
      wepy.request('getRecommend').then((d) => {})
      */
    }
  }
</script>
